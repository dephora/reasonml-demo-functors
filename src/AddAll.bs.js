// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Set    = require("bs-platform/lib/js/set.js");
var List     = require("bs-platform/lib/js/list.js");
var Curry    = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");

function AddAll(A) {
  var addAll = function (from, into) {
    return Curry._3(A[/* fold */1], (function (x, result) {
                  return Curry._2(A[/* add */2], x, result);
                }), from, into);
  };
  return /* module */[/* addAll */addAll];
}

var compare = Caml_obj.caml_compare;

var StringSet = $$Set.Make(/* module */[/* compare */compare]);

var elements = StringSet[19];

var of_list = StringSet[25];

var A_001 = StringSet[13];

var A_002 = StringSet[3];

function addAll(from, into) {
  return Curry._3(A_001, Curry.__2(A_002), from, into);
}

var StringSetPlus_000 = /* empty */StringSet[0];

var StringSetPlus_001 = /* is_empty */StringSet[1];

var StringSetPlus_002 = /* mem */StringSet[2];

var StringSetPlus_003 = /* add */StringSet[3];

var StringSetPlus_004 = /* singleton */StringSet[4];

var StringSetPlus_005 = /* remove */StringSet[5];

var StringSetPlus_006 = /* union */StringSet[6];

var StringSetPlus_007 = /* inter */StringSet[7];

var StringSetPlus_008 = /* diff */StringSet[8];

var StringSetPlus_009 = /* compare */StringSet[9];

var StringSetPlus_010 = /* equal */StringSet[10];

var StringSetPlus_011 = /* subset */StringSet[11];

var StringSetPlus_012 = /* iter */StringSet[12];

var StringSetPlus_013 = /* fold */StringSet[13];

var StringSetPlus_014 = /* for_all */StringSet[14];

var StringSetPlus_015 = /* exists */StringSet[15];

var StringSetPlus_016 = /* filter */StringSet[16];

var StringSetPlus_017 = /* partition */StringSet[17];

var StringSetPlus_018 = /* cardinal */StringSet[18];

var StringSetPlus_020 = /* min_elt */StringSet[20];

var StringSetPlus_021 = /* max_elt */StringSet[21];

var StringSetPlus_022 = /* choose */StringSet[22];

var StringSetPlus_023 = /* split */StringSet[23];

var StringSetPlus_024 = /* find */StringSet[24];

var StringSetPlus = /* module */[
  StringSetPlus_000,
  StringSetPlus_001,
  StringSetPlus_002,
  StringSetPlus_003,
  StringSetPlus_004,
  StringSetPlus_005,
  StringSetPlus_006,
  StringSetPlus_007,
  StringSetPlus_008,
  StringSetPlus_009,
  StringSetPlus_010,
  StringSetPlus_011,
  StringSetPlus_012,
  StringSetPlus_013,
  StringSetPlus_014,
  StringSetPlus_015,
  StringSetPlus_016,
  StringSetPlus_017,
  StringSetPlus_018,
  /* elements */elements,
  StringSetPlus_020,
  StringSetPlus_021,
  StringSetPlus_022,
  StringSetPlus_023,
  StringSetPlus_024,
  /* of_list */of_list,
  /* addAll */addAll
];

var s1 = Curry._1(of_list, /* :: */[
      "a",
      /* :: */[
        "b",
        /* :: */[
          "c",
          /* [] */0
        ]
      ]
    ]);

var s2 = Curry._1(of_list, /* :: */[
      "b",
      /* :: */[
        "c",
        /* :: */[
          "d",
          /* [] */0
        ]
      ]
    ]);

Curry._1(elements, addAll(s2, s1));

function add(x, coll) {
  return /* :: */[
          x,
          coll
        ];
}

var AddSingleStringList = /* module */[
  /* empty : [] */0,
  /* fold */List.fold_right,
  /* add */add
];

function addAll$1(from, into) {
  return List.fold_right((function (x, result) {
                return /* :: */[
                        x,
                        result
                      ];
              }), from, into);
}

var StringListPlus = /* module */[
  /* length */List.length,
  /* hd */List.hd,
  /* tl */List.tl,
  /* nth */List.nth,
  /* rev */List.rev,
  /* append */List.append,
  /* rev_append */List.rev_append,
  /* concat */List.concat,
  /* flatten */List.flatten,
  /* iter */List.iter,
  /* iteri */List.iteri,
  /* map */List.map,
  /* mapi */List.mapi,
  /* rev_map */List.rev_map,
  /* fold_left */List.fold_left,
  /* fold_right */List.fold_right,
  /* iter2 */List.iter2,
  /* map2 */List.map2,
  /* rev_map2 */List.rev_map2,
  /* fold_left2 */List.fold_left2,
  /* fold_right2 */List.fold_right2,
  /* for_all */List.for_all,
  /* exists */List.exists,
  /* for_all2 */List.for_all2,
  /* exists2 */List.exists2,
  /* mem */List.mem,
  /* memq */List.memq,
  /* find */List.find,
  /* filter */List.filter,
  /* find_all */List.find_all,
  /* partition */List.partition,
  /* assoc */List.assoc,
  /* assq */List.assq,
  /* mem_assoc */List.mem_assoc,
  /* mem_assq */List.mem_assq,
  /* remove_assoc */List.remove_assoc,
  /* remove_assq */List.remove_assq,
  /* split */List.split,
  /* combine */List.combine,
  /* sort */List.sort,
  /* stable_sort */List.stable_sort,
  /* fast_sort */List.fast_sort,
  /* sort_uniq */List.sort_uniq,
  /* merge */List.merge,
  /* addAll */addAll$1
];

addAll$1(/* :: */[
      "a",
      /* :: */[
        "b",
        /* [] */0
      ]
    ], /* :: */[
      "c",
      /* :: */[
        "d",
        /* [] */0
      ]
    ]);

exports.AddAll              = AddAll;
exports.StringSet           = StringSet;
exports.StringSetPlus       = StringSetPlus;
exports.s1                  = s1;
exports.s2                  = s2;
exports.AddSingleStringList = AddSingleStringList;
exports.StringListPlus      = StringListPlus;
/* StringSet Not a pure module */
